<!--
    NOTE: For a normal build, I recommend:
    NOTE:
    NOTE:	ant clean build
    NOTE: 
    NOTE: To publish to the maven2 repo:
    NOTE:
    NOTE:	ant push-to-maven2
    NOTE:
    NOTE: Before doing this make sure you have:
    NOTE:   * Permission
    NOTE:   * Updated the version number in build.xml and jsftemplating.bnd and jsft.bnd
    NOTE:   * Updated the release notes with any changes
    NOTE:   * Have an updated source tree and have tested jsftemplating.jar & jsft.jar
    NOTE:   * Update javadoc if necessary
    NOTE:   * Have tagged the source tree with the new version
-->

<!-- Build file for JSFTemplating -->
<project name="JSFTemplating" default="jar-all" basedir="." xmlns:artifact="urn:maven-artifact-ant">

    <!-- Set properties -->
    <!-- NOTE: Change jsftemplating.bnd also to change the version! -->
    <property name="version" value="2.1.0"/>
    <property file="user.properties" />
    <property file="build.properties" />
    <property name="remote.repo.url" value="java-net:/maven2-repository/trunk/repository"/>

    <path id="jsft-dependencies">
        <pathelement location="${servlet-api.jar}" />
        <pathelement location="${jsf-api.jar}" />
        <pathelement location="${el-api.jar}" />
    </path>

    <path id="dependencies">
        <pathelement location="${servlet-api.jar}" />
        <pathelement location="${jsf-api.jar}" />
        <pathelement location="${el-api.jar}" />
        <pathelement location="${jsftemplating-dt.jar}" />
        <pathelement location="${dataprovider.jar}" />
        <path refid="apt-dependencies" />
    </path>

    <path id="apt-dependencies">
        <pathelement location="${java.home}/lib/tools.jar" />
        <pathelement location="${java.home}/../lib/tools.jar" />
    </path>

    <path id="javadoc-dependencies">
        <path refid="dependencies" />
        <path refid="apt-dependencies" />
    </path>

    <path id="test-dependencies">
        <pathelement location="${servlet-api.jar}" />
        <pathelement location="${jsf-api.jar}" />
        <pathelement location="${el-api.jar}" />
        <pathelement location="${jsftemplating.jar}" />
        <pathelement location="${junit.jar}" />
        <pathelement location="${test}/build" />
        <pathelement location="${test}/files" />
    </path>

    <path id="test-compile-dependencies">
        <pathelement location="${servlet-api.jar}" />
        <pathelement location="${jsf-api.jar}" />
        <pathelement location="${el-api.jar}" />
        <pathelement location="${jsftemplating.jar}" />
        <pathelement location="${junit.jar}" />
    </path>

    <target name="init" description="sets ant to execute">
        <condition property="execute.ant" value="${ant.home}/bin/ant.bat" else="${ant.home}/bin/ant">
            <os family="windows" />
        </condition>
        <echo message="Using ${execute.ant}" />
        <echo message="java.home=${java.home}" />
        <echo message="ant.home=${ant.home}" />
	<tstamp>
		<format property="TODAY" pattern="yyyymmdd" />
	</tstamp>
    </target>

    <target name="build" depends="jar-all" description="Build the project"/>

    <target name="all" depends="build, build-samples" description="Build the project and the samples"/>

    <!-- This target builds the custom processors for apt -->
    <target name="compile-apt-files" description="Compile the apt-generated files">
        <mkdir dir="${aptbuild}/." />

        <!-- Compile the java code from ${src} into ${aptbuild} -->
        <javac srcdir="${src}" destdir="${aptbuild}/." includes="**/annotation/**.java" debug="${compile.debug}"
            deprecation="${compile.deprecation}" optimize="${compile.optimize}" compiler="javac1.6" target="${compile.target}" source="${source.version}">
            <classpath refid="dependencies" />
        </javac>
    </target>

    <target name="jar-apt-files" depends="compile-apt-files" description="Package the apt-generated files">
        <mkdir dir="${dist}/." />
        <jar jarfile="${jsftemplating-dt.jar}" update="true">
            <fileset dir="${aptbuild}" includes="**/*.class" />
            <zipfileset dir="${jsftemplating.home}/annotation" prefix="META-INF/services"
                includes="com.sun.mirror.apt.AnnotationProcessorFactory" />
        </jar>
    </target>

    <target name="compile" depends="init, jar-apt-files" description="Compile source">
        <mkdir dir="${build}/." />
	<apt	srcdir="${src}"
		fork="true"
		destdir="${build}/."
		debug="${compile.debug}"
		deprecation="${compile.deprecation}"
		excludes="**/annotation/**,com/sun/jsft/**"
		optimize="${compile.optimize}">
		<!--
		target="${compile.target}"
		source="${source.version}"
		-->
	    <classpath refid="dependencies" />
	</apt>
    </target>

    <target name="jsft-comp" depends="init" description="Compile source">
        <mkdir dir="${build}/." />
	<javac	srcdir="${src}"
		fork="true"
		destdir="${build}/."
		debug="${compile.debug}"
		deprecation="${compile.deprecation}"
		excludes="com/sun/jsftemplating/**"
		optimize="${compile.optimize}">
		<!--
		target="${compile.target}"
		source="${source.version}"
		-->
	    <classpath refid="jsft-dependencies" />
	</javac>
    </target>

    <target name="jar-all" depends="jsft,oldjsftemplating" description="Package everything: jsftemplating.jar and jsft.jar" />

    <target name="jsft" depends="jsft-comp" description="Package the project">
	<mkdir dir="${dist}/." />
	<echo>Copying misc files to build directory.</echo>
	<copy todir="${build}/META-INF" filtering="false" overwrite="true">
	    <fileset dir="${jsftemplating.home}/../jsft" includes="*.xml" />
	</copy>

	<!-- build the jsft.jar file -->
	<echo>Building ${jsft.jar}</echo>

	<!-- Apply bnd to generate OSGi header info -->
	<taskdef resource="aQute/bnd/ant/taskdef.properties" classpath="${bnd.jar}" />
	<bnd files="jsft.bnd" sourcepath="${src}" classpath="${build}" output="${jsft.jar}" />

	<!-- Copy .jar file to the demo app -->
	<copy todir="eventdemo/WEB-INF/lib" filtering="true" overwrite="true">
	    <fileset file="${jsft.jar}"/>
	</copy>
    </target>

    <macrodef name="build.jar">
	<attribute name="jarfile"/>
	<attribute name="xml" default="&lt;view-handler&gt;com.sun.jsftemplating.layout.LayoutViewHandler&lt;/view-handler&gt;"/>
	<sequential>
	    <!-- Copy JS file also b/c currently it needs to be out of .jar -->
	    <filter token="VIEWHANDLER_ELEMENT" value="@{xml}"/>
	    <copy todir="${build}/META-INF" filtering="true" overwrite="true">
		<fileset file="${jsftemplating.home}/faces-config.xml"/>
	    </copy>
	    <echo>Building @{jarfile}</echo>

	    <!-- Apply bnd to generate OSGi header info -->
	    <taskdef resource="aQute/bnd/ant/taskdef.properties" classpath="${bnd.jar}" />
	    <bnd files="jsftemplating.bnd" sourcepath="${src}" classpath="${build}" output="@{jarfile}" />
	</sequential>
    </macrodef>
    
    <target name="oldjsftemplating" depends="compile" description="Package the project">
	<mkdir dir="${dist}/." />
	<echo>Copying misc files to build directory.</echo>
	<copy todir="${dist}/.">
	    <fileset dir="${src}/com/sun/jsftemplating/component/resources/">
		<include name="**/*.js" />
	    </fileset>
	</copy>
	<copy todir="${build}/META-INF" filtering="false" overwrite="true">
	    <fileset dir="${jsftemplating.home}/layout/facelets" includes="*.dtd,*.ent" />
	</copy>
	<copy todir="${build}" filtering="false" overwrite="true">
	    <fileset dir="${src}" includes="**/*.properties" />
	    <fileset dir="${jsftemplating.home}/layout/pages" includes="*.jsf" />
	</copy>
	<copy todir="${build}/META-INF/jsftemplating" filtering="false" overwrite="true">
	    <fileset dir="${jsftemplating.home}/component/layout" includes="*.xml,*.xhtml,*.jsf" />
	    <fileset dir="${jsftemplating.home}/layout/xml" includes="*.dtd" />
	</copy>

	<!-- build the jsftemplating.jar file(s) -->
	<build.jar jarfile="${jsftemplating.jar}"/>
	<!-- No longer support jsftemlating-base.jar... commenting out for now -->
	<!-- <build.jar jarfile="${jsftemplating-base.jar}" xml=" "/> -->
    </target>

    <target name="jarsrc" description="Package the project source">
	 <jar jarfile="${jsft-src.jar}" basedir="${src}" excludes="**/CVS/*,**/annotation**,**/com/sun/jsftemplating/**" update="true" />
	 <jar jarfile="${jsftemplating-src.jar}" basedir="${src}" excludes="**/CVS/*,**/annotation**,**/com/sun/jsft/**" update="true" />
	 <jar jarfile="${jsftemplating-dt-src.jar}" basedir="${src}" includes="**/annotation/**" update="true" />
    </target>

    <target name="javadoc" depends="build" description="Generate javadocs">
        <!-- Generate javadoc -->
        <javadoc destdir="${docs}" private="no" author="true" version="true" use="true"
            windowtitle="Templating for JavaServer Faces Technology (https://jsftemplating.dev.java.net)"
            serialwarn="false">
            <doctitle>
                <![CDATA[<h1><a href="https://jsftemplating.dev.java.net">Templating for JavaServer Faces Technology</a></h1>]]>
            </doctitle>
            <header>
                <![CDATA[<h2>Templating for JavaServer Faces Technology</h2>]]>
            </header>
            <footer>
                <![CDATA[<a href="https://jsftemplating.dev.java.net">https://jsftemplating.dev.java.net</a>]]>
            </footer>

            <fileset dir="${src}">
                <include name="com/sun/jsftemplating/**/*.java" />
            </fileset>

            <classpath refid="javadoc-dependencies" />
        </javadoc>
    </target>

    <target name="-set-proxy" if="proxy.host">
        <echo>***** Setting proxy to ${proxy.host}:${proxy.port}</echo>
        <setproxy proxyhost="${proxy.host}" proxyport="${proxy.port}" proxyuser="${proxy.user}"
            proxypassword="${proxy.pass}" />
    </target>

    <target name="test" depends="compileTest,-set-proxy" description="Run unit tests">
        <java classname="com.sun.jsftemplating.UnitTests" fork="true">
            <classpath refid="test-dependencies" />
        </java>
    </target>


    <target name="compileTest" depends="jar-all">
        <mkdir dir="${test}/build/." />

        <!-- Compile the java code from ${src} into ${build} -->
        <javac srcdir="${test}/java" destdir="${test}/build/." debug="${compile.debug}"
            deprecation="${compile.deprecation}" optimize="${compile.optimize}" target="${compile.target}" source="${source.version}">
            <classpath refid="test-compile-dependencies" />
        </javac>
    </target>

    <target name="clean" description="Clean the project">
        <!-- Delete the build / dist directories ;-->
        <delete dir="${aptbuild}" />
        <delete dir="${build}" />
        <delete dir="${dist}" />
        <delete dir="${test}/build" />
        <delete dir="${docs}" />
	<delete dir="eventdemo/WEB-INF/lib" />
        <ant dir="samples" target="clean" />
    </target>

    <target name="build-samples" description="Build the samples">
        <!-- build all sample apps under the samples directory -->
        <ant dir="samples" target="build" />
    </target>
    
    <target name="nightly" depends="jarsrc" description="Upload nightly build to java.net">
        <taskdef resource="org/kohsuke/javanettasks.properties">
            <classpath>
                <pathelement location="${javanettasks.jar}"/>
                <pathelement location="${httpunit.jar}"/>
                <pathelement location="${nekohtml.jar}"/>
                <pathelement location="${dom4j.jar}"/>
                <!-- <fileset dir="${tasks.home}/lib" includes="*.jar"/> -->
            </classpath>
        </taskdef>
	
        <antcall target="push-to-maven"/>

        <echo>Uploading jsftemplating.jar</echo>
        <javaNetUpload projectName="jsftemplating"
                       toFile="/nightly/jsftemplating.jar"
                       fromFile="${dist}/jsftemplating.jar"
                       fileDescription="Nightly snapshot of JSFTemplating"
                       overwrite="yes"/>
<!--
        No longer support jsftemplating-base.jar
	Commenting out for now....

        <echo>Uploading jsftemplating-base.jar</echo>
        <javaNetUpload projectName="jsftemplating"
                       toFile="/nightly/jsftemplating-base.jar"
                       fromFile="${dist}/jsftemplating-base.jar"
                       fileDescription="Nightly snapshot of JSFTemplating.  Non-ViewHandler version of jar file - needs extra configuration. For non-page use only."
                       overwrite="yes"/>
-->
        <echo>Uploading jsftemplating-dt.jar</echo>
        <javaNetUpload projectName="jsftemplating"
                       toFile="/nightly/jsftemplating-dt.jar"
                       fromFile="${dist}/jsftemplating-dt.jar"
                       fileDescription="Nightly snapshot of the JSFTemplating design time lib"
                       overwrite="yes"/>
    </target>
    
    <target name="push-to-maven-prepare" depends="jar-all,jarsrc" description="Prepare artifacts for deployment to the Maven repo">
        <taskdef resource="maven-repository-importer.properties">
            <classpath>
                <pathelement path="${maven-repository-importer.jar}" />
            </classpath>
        </taskdef>
        <delete dir="${build}/maven-repo" />
        <!-- clean it -->
        <maven-repository-importer destdir="${build}/maven-repo" version="${version}">
            <artifact jar="${dist}/jsftemplating.jar" pom="jsftemplating.pom" srczip="${jsftemplating-src.jar}"/>
            <artifact jar="${dist}/jsftemplating-dt.jar" pom="jsftemplating-dt.pom" srczip="${jsftemplating-dt-src.jar}"/>
        </maven-repository-importer>
    </target>

    <target name="push-to-maven" depends="push-to-maven-prepare" description="Publish artifacts to the java.net Maven repo">
        <!-- import to CVS-->
        <tstamp />
        <echo>importing to CVS...</echo>
	<copy todir="repo/" preservelastmodified="true">
		<fileset dir="${build}/maven-repo"/>
	</copy>
	<cvs reallyquiet="true" command="-Q add repo/*"/>
	<cvs>
		<commandline>
			<argument value="-Q"/>
			<argument value="ci"/>
			<argument line="-m"/>
			<argument value="deploying jars to the maven repo" />
			<argument value="repo/"/>
		</commandline>
	</cvs>
	<!--
        <cvs dest="${build}/maven-repo">
            <commandline>
                <argument value="-d:pserver:${java.net.user.name}@cvs.dev.java.net:/cvs" />
                <argument line="-z9 import -ko -W *.jar -kb -m" />
                <argument value="deploying new jars to the java.net maven repository" />

                <argument value="jsftemplating/repo" />
                <argument line="deployment-to-maven-repository t${DSTAMP}${TSTAMP}" />
            </commandline>
        </cvs>
	-->
    </target>

    <target name="initialize.maven">
        <!--download ant-tasks
	     This is currently failing... I check in the .jar file to avoid this hassle
        <get src="http://mirror.its.uidaho.edu/pub/apache/maven/binaries/maven-ant-tasks-2.1.0.jar" dest="maven-ant-tasks.jar"/>   
	-->
        <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant"
                 classpath="maven-ant-tasks.jar"/>
        <condition property="maven.repo.local" value="${maven.repo.local}" else="${user.home}/.m2/repository">
            <isset property="maven.repo.local"/>
        </condition>
    </target>

    <target name="push.jsft.artifact" >
        <!-- Generate a Dynamic POM file -->
        <artifact:pom id="pom.tmp.ref" groupId="com.sun.jsftemplating" version="${version}" artifactId="jsft" packaging="jar" name="JSFT Java Server Faces 2.1+" />
        <!--  Write the generated POM file out to a temporary file on disc -->
        <tempfile property="pom.tmp.file" deleteonexit="true" />  
        <artifact:writepom pomRefId="pom.tmp.ref" file="${pom.tmp.file}" />
        <!--  Read the temporary file back in as the POM reference  -->
        <artifact:pom id="jsft.pom" file="${pom.tmp.file}" />

	<!-- deploy to local maven repo -->
        <artifact:localRepository id="local.repository" path="${maven.repo.local}"/>
        <artifact:install file="${dist}/jsft.jar">
            <pom refid="jsft.pom"/>
            <localRepository refid="local.repository"/>
            <attach file="${jsft-src.jar}" classifier="src" />
        </artifact:install>    

        <!-- install Maven wagon provider to upload artifact to remote repo -->
        <artifact:install-provider artifactId="wagon-svn" groupId="org.jvnet.wagon-svn" version="1.7">
            <artifact:remoteRepository id="java.net.maven2.repository" url="http://download.java.net/maven/2/" />
        </artifact:install-provider>

	<!-- deploy to remote maven repo -->
        <artifact:deploy file="${dist}/jsft.jar">
            <pom refid="jsft.pom"/>
            <remoteRepository url="${remote.repo.url}"/>
            <attach file="${jsft-src.jar}" classifier="src" />
        </artifact:deploy>
    </target>

    <target name="push.jsftemplating.artifact" >
        <!-- Generate a Dynamic POM file -->
        <artifact:pom id="pom.tmp.ref" groupId="com.sun.jsftemplating" version="${version}" artifactId="jsftemplating" packaging="jar" name="Templating for Java Server Faces" />
        <!--  Write the generated POM file out to a temporary file on disc -->
        <tempfile property="pom.tmp.file" deleteonexit="true" />  
        <artifact:writepom pomRefId="pom.tmp.ref" file="${pom.tmp.file}" />
        <!--  Read the temporary file back in as the POM reference  -->
        <artifact:pom id="jsftemplating.pom" file="${pom.tmp.file}" />

	<!-- deploy to local maven repo -->
        <artifact:localRepository id="local.repository" path="${maven.repo.local}"/>
        <artifact:install file="${dist}/jsftemplating.jar">
            <pom refid="jsftemplating.pom"/>
            <localRepository refid="local.repository"/>
            <attach file="${jsftemplating-src.jar}" classifier="src" />
        </artifact:install>    

        <!-- install Maven wagon provider to upload artifact to remote repo -->
        <artifact:install-provider artifactId="wagon-svn" groupId="org.jvnet.wagon-svn" version="1.7">
            <artifact:remoteRepository id="java.net.maven2.repository" url="http://download.java.net/maven/2/" />
        </artifact:install-provider>

	<!-- deploy to remote maven repo -->
        <artifact:deploy file="${dist}/jsftemplating.jar">
            <pom refid="jsftemplating.pom"/>
            <remoteRepository url="${remote.repo.url}"/>
            <attach file="${jsftemplating-src.jar}" classifier="src" />
        </artifact:deploy>
    </target>

    <target name="push.jsftemplating-dt.artifact" >
        <!-- Generate a Dynamic POM file -->
        <artifact:pom id="pom.tmp.ref" groupId="com.sun.jsftemplating" version="${version}" artifactId="jsftemplating-dt" packaging="jar" name="JSFTemplating Design Time lib" />
        <!--  Write the generated POM file out to a temporary file on disc -->
        <tempfile property="pom.tmp.file" deleteonexit="true" />
        <artifact:writepom pomRefId="pom.tmp.ref" file="${pom.tmp.file}" />
        <!--  Read the temporary file back in as the POM reference  -->
        <artifact:pom id="jsftemplating-dt.pom" file="${pom.tmp.file}" />

	<!-- deploy to local maven repo -->
        <artifact:localRepository id="local.repository" path="${maven.repo.local}"/>
        <artifact:install file="${dist}/jsftemplating-dt.jar">
            <pom refid="jsftemplating-dt.pom"/>
            <localRepository refid="local.repository"/>
            <attach file="${jsftemplating-dt-src.jar}" classifier="src" />
        </artifact:install>    

        <!-- install Maven wagon provider to upload artifact to remote repo -->
        <artifact:install-provider artifactId="wagon-svn" groupId="org.jvnet.wagon-svn" version="1.7">
            <artifact:remoteRepository id="java.net.maven2.repository" url="http://download.java.net/maven/2/" />
        </artifact:install-provider>

	<!-- deploy to remote maven repo -->
        <artifact:deploy file="${dist}/jsftemplating-dt.jar">
            <pom refid="jsftemplating-dt.pom"/>
            <remoteRepository url="${remote.repo.url}"/>
            <attach file="${jsftemplating-dt-src.jar}" classifier="src" />
        </artifact:deploy>
    </target>

    <target name="push-to-maven2" depends="initialize.maven,jarsrc,build" description="Publish artifacts to the java.net Maven2 repo" >
        <antcall target="push.jsftemplating.artifact"/>
        <antcall target="push.jsftemplating-dt.artifact"/>
        <antcall target="push.jsft.artifact"/>
    </target>

</project>
